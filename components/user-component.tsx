/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/jvyovczDOYw
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Archivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { supabase } from "@/lib/supabase";
import { ExperienceDetail, Person } from "@/lib/types";
import { useRouter } from "next/router";
import { useState } from "react";

type RelatedPeople = {
  name: string;
  identity_no: string;
  experience: ExperienceDetail;
};

const parseAndFormatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString("en-IN", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });
};

const removeHtmlTags = (htmlString?: string): string => {
  return htmlString?.replace(/<[^>]+>/g, "") ?? "";
};

const ias_precedence = [
  "Cabinet Secretary",
  "Above Secretary Level",
  "Apex Scale",
  "Secretary",
  "Secretary Equivalent",
  "Additional Secretary",
  "Additional Secretary Equivalent",
  "Senior Administrative Grade",
  "Joint Secretary",
  "Joint Secretary Equivalent",
  "Director",
  "Director Equivalent",
  "Deputy Secretary",
  "Deputy Secretary Equivalent",
  "Under Secretary",
  "Under Secretary Equivalent",
  "Junior Administrative Grade (Selection Grade)",
  "Junior Administrative Grade (Ordinary Grade)",
  "Senior Time Scale",
  "Junior Scale",
  "Other Scales",
  "Not Available",
];

const precedenceMap = {};
ias_precedence.forEach((level, index) => {
  precedenceMap[level] = index;
});

export function UserComponent({ person }: { person: Person }) {
  const [relatedPeople, setRelatedPeople] = useState<RelatedPeople[] | null>(
    null
  );
  const [activeMinistry, setActiveMinistry] = useState<ExperienceDetail | null>(
    null
  );
  const [sameAllotment, setSameAllotment] = useState<Person[] | null>(null);

  const [searchType, setSearchType] = useState("");

  // const [activePerson, setActivePerson] = useState<Person | null>(null);

  const router = useRouter();

  const handleMinistrySearch = async ({
    experience,
    searchTypeTemp,
  }: {
    experience: ExperienceDetail;
    searchTypeTemp: string;
  }) => {
    // Perform API request to the search endpoint
    setActiveMinistry(experience);

    console.log({
      ministry: experience.ministry,
      period_from: experience.period_from,
      period_to: experience.period_to,
    });

    const response = await fetch("/api/search_by_experience", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        ministry: experience.ministry,
        period_from: experience.period_from,
        period_to: experience.period_to,
      }),
    });

    if (response.ok) {
      const data: RelatedPeople[] | null = await response.json();
      console.log(data);
      console.log(searchTypeTemp);

      if (!data) {
        return;
      }

      if (searchTypeTemp == "ministry") {
        setSearchType(searchTypeTemp);
        setRelatedPeople(
          data?.sort((a, b) => {
            const levelA = a.experience.level;
            const levelB = b.experience.level;

            return precedenceMap[levelA] - precedenceMap[levelB];
          })
        );
      } else if (searchTypeTemp == "major") {
        setSearchType(searchTypeTemp);
        setRelatedPeople(
          data
            .filter(
              (e) =>
                e.experience.experience_major == experience.experience_major
            )
            .sort((a, b) => {
              const levelA = a.experience.level;
              const levelB = b.experience.level;

              return precedenceMap[levelA] - precedenceMap[levelB];
            })
        );
      } else if (searchTypeTemp == "minor") {
        setSearchType(searchTypeTemp);
        setRelatedPeople(
          data
            .filter(
              (e) =>
                e.experience.experience_minor == experience.experience_minor
            )
            .sort((a, b) => {
              const levelA = a.experience.level;
              const levelB = b.experience.level;

              return precedenceMap[levelA] - precedenceMap[levelB];
            })
        );
      }
    } else {
      console.error("Error:", response.statusText);
    }
  };

  const handleDesignationSearch = async ({
    experience,
  }: {
    experience: ExperienceDetail;
  }) => {
    // Perform API request to the search endpoint
    setActiveMinistry(experience);
    setSearchType("designation");

    console.log({
      ministry: experience.ministry,
      period_from: experience.period_from,
      period_to: experience.period_to,
    });

    const response = await fetch("/api/search_by_designation", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        ministry: experience.ministry,
        designation: experience.designation,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      console.log(data);
      setRelatedPeople(data);
    } else {
      console.error("Error:", response.statusText);
    }
  };

  function getSearchTypeText() {
    if (searchType == "ministry") {
      return `Worked at ${removeHtmlTags(activeMinistry?.ministry ?? "")}`;
    } else if (searchType == "designation") {
      return `Successors & Predecessors`;
    } else if (searchType == "major") {
      return `Worked at ${removeHtmlTags(
        activeMinistry?.ministry ?? ""
      )} under ${removeHtmlTags(activeMinistry?.experience_major)}`;
    } else if (searchType == "minor") {
      return `Worked at ${removeHtmlTags(
        activeMinistry?.ministry ?? ""
      )} under ${removeHtmlTags(activeMinistry?.experience_minor)}`;
    } else {
      return "";
    }
    return "";
  }

  return (
    <div className="px-4 md:px-6 py-12 flex flex-wrap max-w-full">
      <div className="w-auto mr-[80px]">
        <div className="flex flex-col items-center gap-6">
          <div className="grid gap-1">
            <h1 className="text-2xl font-bold">{person.name}</h1>
            <div className="text-gray-500 dark:text-gray-400">
              {person.service}
            </div>
            <div
              className="text-gray-500 dark:text-gray-400 underline"
              onClick={async () => {
                const { data, error } = await supabase
                  .from("civil_servants")
                  .select("*")
                  .eq("allotment_year", person.allotment_year);
                if (data) {
                  setSearchType("allotment");
                  setSameAllotment(data);
                }
              }}
            >
              Allotment Year: {person.allotment_year}
            </div>
            <div className="text-gray-500 dark:text-gray-400">
              Date of Birth: {parseAndFormatDate(person.date_of_birth)}
            </div>
            <div className="text-gray-500 dark:text-gray-400">
              Domicile: {person.place_of_domicile}
            </div>
            <div className="text-gray-500 dark:text-gray-400">
              Cadre State: {person.cadre_state}
            </div>
          </div>
        </div>
      </div>

      <div className="grid gap-4 max-w-min mr-[80px]">
        <div>
          <h2 className="text-xl font-semibold">Experience</h2>
          <div className="overflow-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Designation</TableHead>
                  <TableHead>Ministry</TableHead>
                  <TableCell>Experience Major/Minor</TableCell>
                  <TableHead>Period From</TableHead>
                  <TableHead>Period To</TableHead>
                </TableRow>
              </TableHeader>

              <TableBody>
                {person.experience_details.map((e) => {
                  return (
                    <TableRow>
                      <TableCell
                        className="font-medium underline"
                        onClick={() => {
                          handleDesignationSearch({ experience: e });
                        }}
                      >
                        {e.designation}
                      </TableCell>

                      <TableCell
                        className="underline"
                        onClick={() => {
                          handleMinistrySearch({
                            experience: e,
                            searchTypeTemp: "ministry",
                          });
                        }}
                      >
                        {removeHtmlTags(e.ministry)}
                      </TableCell>

                      <TableCell>
                        <p
                          className="underline"
                          onClick={() => {
                            handleMinistrySearch({
                              experience: e,
                              searchTypeTemp: "major",
                            });
                          }}
                        >
                          {removeHtmlTags(e.experience_major)}
                        </p>
                        {"/"}
                        <p
                          className="underline"
                          onClick={() => {
                            handleMinistrySearch({
                              experience: e,
                              searchTypeTemp: "minor",
                            });
                          }}
                        >
                          {removeHtmlTags(e.experience_minor)}
                        </p>
                      </TableCell>

                      <TableCell>{parseAndFormatDate(e.period_from)}</TableCell>
                      <TableCell>{parseAndFormatDate(e.period_to)}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>
        </div>
      </div>

      <div className="grid gap-4 max-w-min">
        {searchType == "allotment" ? (
          <div>
            <h2 className="text-xl font-semibold">Batchmates</h2>
            {/* <h2 className="text-l">{removeHtmlTags(activeMinistry?.ministry ?? '')}</h2> */}

            <div className="overflow-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Allotment Year</TableHead>
                    <TableCell>Cadre State</TableCell>
                    {/* <TableHead>Period From</TableHead> */}
                    {/* <TableHead>Period To</TableHead> */}
                  </TableRow>
                </TableHeader>

                {/* <RelatedPeopleTable relatedPeople={relatedPeople} person={person} activeMinistry={activeMinistry}/> */}

                <TableBody>
                  {sameAllotment
                    ?.filter((f) => f.identity_no != person.identity_no)
                    ?.map((e) => {
                      return (
                        <TableRow
                          onClick={async () => {
                            router.push(`/user/${e.identity_no}`);
                          }}
                        >
                          <TableCell className="font-medium">
                            {e.name}
                          </TableCell>
                          <TableCell>{e.allotment_year}</TableCell>
                          <TableCell>{e.cadre_state}</TableCell>
                          {/* <TableCell>{removeHtmlTags(e.experience.designation)}</TableCell>
                    <TableCell>{e.experience.experience_major == activeMinistry?.experience_major ? 'True' : 'False'}</TableCell>
                    <TableCell>
                     {parseAndFormatDate(e.experience.period_from)}
                    </TableCell>
                       <TableCell>
                     {parseAndFormatDate(e.experience.period_to)}
                    </TableCell> */}
                        </TableRow>
                      );
                    })}
                </TableBody>
              </Table>
            </div>
          </div>
        ) : (
          <div>
            <h2 className="text-xl font-semibold">Experience Details</h2>
            <h2 className="text-l">{getSearchTypeText()}</h2>

            <div className="overflow-auto">
              <Table>
                <RelatedPeopleTable
                  relatedPeople={relatedPeople}
                  person={person}
                  activeMinistry={activeMinistry}
                />

                {/* <TableBody>
                     {relatedPeople?.filter(f => f.identity_no != person.identity_no)?.map(e => {
                       return <TableRow onClick={async () => {
                         router.push(`/user/${e.identity_no}`)
                  }}>
                    <TableCell className="font-medium">{e.name}</TableCell>
                    <TableCell>{removeHtmlTags(e.experience.designation)}</TableCell>
                    <TableCell>{e.experience.experience_major == activeMinistry?.experience_major ? 'True' : 'False'}</TableCell>
                    <TableCell>
                     {parseAndFormatDate(e.experience.period_from)}
                    </TableCell>
                       <TableCell>
                     {parseAndFormatDate(e.experience.period_to)}
                    </TableCell>
                  </TableRow>
                })}


                </TableBody> */}
              </Table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

const RelatedPeopleTable = ({ relatedPeople, person, activeMinistry }) => {
  const router = useRouter();

  // Split the relatedPeople into exact matches and non-exact matches
  // const exactMatches = relatedPeople?.filter(
  //   (e) => e.experience.experience_major === activeMinistry?.experience_major
  //   // && e.identity_no !== person.identity_no
  // );

  // const nonExactMatches = relatedPeople?.filter(
  //   (e) => e.experience.experience_major !== activeMinistry?.experience_major
  //   // && e.identity_no !== person.identity_no
  // );

  if (!relatedPeople) {
    return <></>;
  }

  return (
    <>
      <TableHeader>
        <TableRow>
          <TableHead>Name</TableHead>
          <TableHead>Designation / Level</TableHead>
          <TableHead>Ministry</TableHead>
          <TableCell>Experience</TableCell>
          <TableHead>Period From</TableHead>
          <TableHead>Period To</TableHead>
        </TableRow>
      </TableHeader>

      <TableBody>
        {/* Render exact matches first */}
        {relatedPeople.map((e, i) => (
          <TableRow
            key={i}
            onClick={async () => {
              await router.push(`/user/${e.identity_no}`);
            }}
          >
            <TableCell className="font-medium">{e.name}</TableCell>
            <TableCell>
              {removeHtmlTags(e.experience.designation)} / {e.experience.level}
            </TableCell>
            <TableCell>{removeHtmlTags(e.experience.ministry)}</TableCell>
            <TableCell>
              {removeHtmlTags(e.experience.experience_major)} <br />{" "}
              {removeHtmlTags(e.experience.experience_minor)}
            </TableCell>
            <TableCell>
              {parseAndFormatDate(e.experience.period_from)}
            </TableCell>
            <TableCell>{parseAndFormatDate(e.experience.period_to)}</TableCell>
          </TableRow>
        ))}

        {/* Optionally, add a separator row if needed */}
        {/* {exactMatches?.length > 0 && nonExactMatches?.length > 0 && (
          <TableRow>
            <TableCell
              colSpan={5}
              style={{ textAlign: "center", fontWeight: "bold" }}
            >
              Other People
            </TableCell>
          </TableRow>
        )} */}

        {/* Render non-exact matches next */}
        {/* {nonExactMatches?.map((e) => (
          <TableRow
            key={e.identity_no}
            onClick={async () => {
              await router.push(`/user/${e.identity_no}`);
            }}
          >
            <TableCell className="font-medium">{e.name}</TableCell>
            <TableCell>{removeHtmlTags(e.experience.designation)}</TableCell>
            <TableCell>
              {removeHtmlTags(e.experience_major)} /{" "}
              {removeHtmlTags(e.experience_minor)}
            </TableCell>
            <TableCell>
              {parseAndFormatDate(e.experience.period_from)}
            </TableCell>
            <TableCell>{parseAndFormatDate(e.experience.period_to)}</TableCell>
          </TableRow>
        ))} */}
      </TableBody>
    </>
  );
};
